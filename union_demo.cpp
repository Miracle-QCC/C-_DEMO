#include<iostream>
/*
union只能存储一种类型，即选择其中一种，其他的都失效
*/

/*
和struct一样，总大小，即sizeof的结果，必须是其内部最大成员长度(即前面内存对齐指令中提到的有效值)的整数倍，不足的要补齐
union占用空间大小：
例:
Union U1{
Char a[9]; //占用9字节
Int b; // 占用4字节
Double c； //占用8字节
}
此时共用体大小为16，其中最大占用空间为9，其各成员类型占用空间为1，4，8，但是此时9无法整除4，8，所以必须添加空白字节，将大小添加为16，既可以整除1，4，8。
Union U2{
Char a[7]；//占用7字节
Int b; //占用4字节
Double c; //占用8字节
}
此时共用体占用大小8字节，其中最大占用空间为8，其各成员类型占用空间大小为1（7），4，8，所以8可以被1，4，8整除，所以大小为8.
Union U3{
Char a; //占用1字节
Int b[3]; //占用12字节
Double c; //占用8字节
}
此共用体占用空间大小为16，最大占用空间为12，其各成员类型占用空间大小围殴1，4（3），8，此时12无法整除8，所以添加空白字节，添加到16，此时可被所有类型整除，所以大小为16.

*/
union price
{
    /* data */
    int i_val;
    double d_val;
};
int main(){
    using namespace std;
    price p;
    
    p.i_val = 1;
    p.d_val = 1.0;
    
    cout << p.i_val << endl;
    cout << p.d_val << endl;
    // 得到：
    // 0
    // 1
    // 表明i_val被放弃了，变为初始值
}